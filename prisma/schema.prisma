// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum InterviewStatus {
  IN_PROGRESS
  COMPLETED
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  role                     UserRole                  @default(USER)
  password                 String?
  resumeUrl                String? // URL to the resume stored on AWS S3
  extractedText            String?                   @db.Text // Added: full raw text extracted from the resume
  skills                   String[]
  videos                   Video[]
  interviews               Interview[]
  accounts                 Account[]
  resumeJobs               ResumeJob[]
  agents                   Agent[]
  popularInterviewSessions PopularInterviewSession[]
  behavioralInterviewSessions BehavioralInterviewSession[]
}

model Agent {
  id           String   @id @default(uuid())
  name         String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instructions String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@map("agents")
}

model Interview {
  id        String              @id @default(cuid())
  userId    String
  status    InterviewStatus     @default(IN_PROGRESS)
  startTime DateTime
  endTime   DateTime?
  duration  Int?
  createdAt DateTime            @default(now())
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video?
  questions InterviewQuestion[]

  @@index([userId])
  @@index([status])
}

model Video {
  id               String     @id @default(cuid())
  userId           String
  interviewId      String?    @unique
  videoUrl         String?
  processingStatus String? // "UPLOADING" | "PROCESSING" | "READY"
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  interview        Interview? @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
  @@index([userId])
}

model Question {
  id         String              @id @default(cuid())
  question   String
  interviews InterviewQuestion[]
}

model InterviewQuestion {
  id          String    @id @default(cuid())
  interviewId String
  questionId  String
  response    String?
  startTime   DateTime?
  endTime     DateTime?

  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  question  Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([interviewId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Updated model to store resume jobs associated with a User
model ResumeJob {
  id     String   @id @default(cuid())
  title  String // Title extracted from the resume
  skills String[] // Array of skills extracted from the resume

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Model for interviewers
model Interviewer {
  id          String   @id @default(cuid())
  name        String
  agentId     String?  @unique // Retell agent ID
  image       String?
  description String?  @db.Text
  specialties String[] // Areas of expertise
  rapport     Int? // Interviewer personality traits
  exploration Int?
  empathy     Int?
  speed       Int?
  audio       String? // Audio file name
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions PopularInterviewSession[]
  behavioralSessions BehavioralInterviewSession[]

  @@index([isActive])
  @@index([agentId])
}

// Model for popular interview topics
model PopularInterview {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  difficulty  String // "Beginner", "Intermediate", "Advanced"
  duration    Int // Default duration in minutes
  category    String // "Data Structures", "System Design", "DevOps", etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions PopularInterviewSession[]

  @@index([category])
  @@index([difficulty])
}

// Model to track user sessions for popular interviews
model PopularInterviewSession {
  id                 String          @id @default(cuid())
  userId             String
  popularInterviewId String
  interviewerId      String? // Optional interviewer selection
  questionCount      Int // Number of questions selected by user
  duration           Int // Duration selected by user in minutes
  questions          String[] // AI-generated questions for this session
  status             InterviewStatus @default(IN_PROGRESS)
  startTime          DateTime
  endTime            DateTime?
  createdAt          DateTime        @default(now())

  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  popularInterview PopularInterview    @relation(fields: [popularInterviewId], references: [id], onDelete: Cascade)
  interviewer      Interviewer?        @relation(fields: [interviewerId], references: [id], onDelete: SetNull)
  responses        InterviewResponse[]

  @@index([userId])
  @@index([popularInterviewId])
  @@index([interviewerId])
  @@index([status])
}

// Model to store interview responses
model InterviewResponse {
  id           String   @id @default(cuid())
  sessionId    String
  questionText String   @db.Text
  userResponse String?  @db.Text
  aiResponse   String?  @db.Text
  responseTime Int? // Time taken to respond in seconds
  createdAt    DateTime @default(now())

  // Relations
  session PopularInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

// Model for behavioral interview topics
model BehavioralInterview {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  category    String // "Common Themes" or "Company Specific"
  company     String? // Company name for company-specific questions (null for common themes)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions BehavioralInterviewSession[]

  @@index([category])
  @@index([company])
  @@index([isActive])
}

// Model to track user sessions for behavioral interviews
model BehavioralInterviewSession {
  id                    String          @id @default(cuid())
  userId                String
  behavioralInterviewId String
  interviewerId         String? // Optional interviewer selection
  questionCount         Int // Number of questions selected by user
  duration              Int // Duration selected by user in minutes
  experienceLevel       ExperienceLevel @default(MID) // Entry, Mid, Senior
  targetRole            String @default("Software Engineer") // Target role for the interview
  questions             String[] // AI-generated questions for this session
  status                InterviewStatus @default(IN_PROGRESS)
  startTime             DateTime
  endTime               DateTime?
  createdAt             DateTime        @default(now())

  // Relations
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  behavioralInterview BehavioralInterview      @relation(fields: [behavioralInterviewId], references: [id], onDelete: Cascade)
  interviewer         Interviewer?             @relation(fields: [interviewerId], references: [id], onDelete: SetNull)
  responses           BehavioralInterviewResponse[]

  @@index([userId])
  @@index([behavioralInterviewId])
  @@index([interviewerId])
  @@index([status])
  @@index([experienceLevel])
}

// Model to store behavioral interview responses
model BehavioralInterviewResponse {
  id           String   @id @default(cuid())
  sessionId    String
  questionText String   @db.Text
  userResponse String?  @db.Text
  aiResponse   String?  @db.Text
  responseTime Int? // Time taken to respond in seconds
  createdAt    DateTime @default(now())

  // Relations
  session BehavioralInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}
